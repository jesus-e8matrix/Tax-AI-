/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Btu5J2C2vcmf5tsuHc6dV
// Component: G095To7nT4ho
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TextInput from "../../TextInput"; // plasmic-import: rOL53Ae4m72k/component
import Checkbox from "../../Checkbox"; // plasmic-import: ptoitlZzcWXg/component
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Btu5J2C2vcmf5tsuHc6dV/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 7Btu5J2C2vcmf5tsuHc6dV/projectcss
import sty from "./PlasmicRegistrationPage.module.css"; // plasmic-import: G095To7nT4ho/css
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: rmimX76DFuld/icon
import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: HR7OiVqxncdb/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: bpsLJ93ouDLv/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: wXPsmpnxCKz1/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: JcKhqLwyakHg/icon

createPlasmicElementProxy;

export const PlasmicRegistrationPage__VariantProps = new Array();

export const PlasmicRegistrationPage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRegistrationPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const styleTokensClassNames = _useStyleTokens();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"registrationPage"}
          data-plasmic-override={overrides.registrationPage}
          className={classNames(projectcss.all, sty.registrationPage)}
        >
          <VectorIcon
            className={classNames(projectcss.all, sty.svg__fqfMg)}
            role={"img"}
          />

          <Vector10Icon
            className={classNames(projectcss.all, sty.svg__j3YRm)}
            role={"img"}
          />

          <Vector3Icon
            className={classNames(projectcss.all, sty.svg__cAkGg)}
            role={"img"}
          />

          <Vector4Icon
            className={classNames(projectcss.all, sty.svg__oDex)}
            role={"img"}
          />

          <Vector5Icon
            className={classNames(projectcss.all, sty.svg__ht3Qm)}
            role={"img"}
          />

          <Vector5Icon
            className={classNames(projectcss.all, sty.svg__qHmUg)}
            role={"img"}
          />

          <div
            data-plasmic-name={"frame5"}
            data-plasmic-override={overrides.frame5}
            className={classNames(projectcss.all, sty.frame5)}
          >
            <div
              data-plasmic-name={"fullName"}
              data-plasmic-override={overrides.fullName}
              className={classNames(projectcss.all, sty.fullName)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f9X7B
                )}
              >
                {"Full Name"}
              </div>
            </div>
            <div
              data-plasmic-name={"eMail"}
              data-plasmic-override={overrides.eMail}
              className={classNames(projectcss.all, sty.eMail)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Cqjg
                )}
              >
                {"E-mail"}
              </div>
            </div>
            <div
              data-plasmic-name={"phoneNumber"}
              data-plasmic-override={overrides.phoneNumber}
              className={classNames(projectcss.all, sty.phoneNumber)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wc9I
                )}
              >
                {"Phone number"}
              </div>
            </div>
            <div
              data-plasmic-name={"createPassword"}
              data-plasmic-override={overrides.createPassword}
              className={classNames(projectcss.all, sty.createPassword)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jEfpk
                )}
              >
                {"Create password"}
              </div>
            </div>
            <div
              data-plasmic-name={"confirmPassword"}
              data-plasmic-override={overrides.confirmPassword}
              className={classNames(projectcss.all, sty.confirmPassword)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qNuyp
                )}
              >
                {"Confirm password"}
              </div>
            </div>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"]).apply(
                  null,
                  eventArgs
                );
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"Alex Bream"}
              value={generateStateValueProp($state, ["textInput", "value"])}
            />

            <TextInput
              data-plasmic-name={"textInput2"}
              data-plasmic-override={overrides.textInput2}
              className={classNames("__wab_instance", sty.textInput2)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "textInput2",
                  "value"
                ]).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"lesh@gmai"}
              value={generateStateValueProp($state, ["textInput2", "value"])}
            />

            <TextInput
              data-plasmic-name={"textInput3"}
              data-plasmic-override={overrides.textInput3}
              className={classNames("__wab_instance", sty.textInput3)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "textInput3",
                  "value"
                ]).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"+234 000-000-0000"}
              value={generateStateValueProp($state, ["textInput3", "value"])}
            />

            <TextInput
              data-plasmic-name={"textInput4"}
              data-plasmic-override={overrides.textInput4}
              className={classNames("__wab_instance", sty.textInput4)}
              inputType={"password"}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "textInput4",
                  "value"
                ]).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"************"}
              value={generateStateValueProp($state, ["textInput4", "value"])}
            />

            <TextInput
              data-plasmic-name={"textInput5"}
              data-plasmic-override={overrides.textInput5}
              className={classNames("__wab_instance", sty.textInput5)}
              inputType={"password"}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "textInput5",
                  "value"
                ]).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"************"}
              value={generateStateValueProp($state, ["textInput5", "value"])}
            />

            <PlasmicLink__
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              className={classNames(projectcss.all, projectcss.a, sty.frame4)}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ztou
                )}
              >
                {"Login"}
              </div>
            </PlasmicLink__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hkqpa
              )}
            >
              {"Already have an account?"}
            </div>
            <Checkbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              className={classNames("__wab_instance", sty.checkbox)}
              isSelected={generateStateValueProp($state, [
                "checkbox",
                "isSelected"
              ])}
              label={"I agree to all statements included in Terms of Use"}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "checkbox",
                  "isSelected"
                ]).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </div>
          <div
            data-plasmic-name={"frame10"}
            data-plasmic-override={overrides.frame10}
            className={classNames(projectcss.all, sty.frame10)}
          >
            <div
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              className={classNames(projectcss.all, sty.frame9)}
            >
              <div
                data-plasmic-name={"frame8"}
                data-plasmic-override={overrides.frame8}
                className={classNames(projectcss.all, sty.frame8)}
              >
                <div
                  data-plasmic-name={"frame6"}
                  data-plasmic-override={overrides.frame6}
                  className={classNames(projectcss.all, sty.frame6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rJnV4
                    )}
                  >
                    {"Create Your Account"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sUkH3
                    )}
                  >
                    {"Enter your details"}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"frame12"}
            data-plasmic-override={overrides.frame12}
            className={classNames(projectcss.all, sty.frame12)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dvqR
              )}
            >
              {"Welcome to \nIncome Tax AI"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gMdBf
              )}
            >
              {"Create your account with ITAI"}
            </div>
          </div>
          <div
            data-plasmic-name={
              "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
            }
            data-plasmic-override={
              overrides.招聘矢量插画人物场景插画招聘1100924黑与白01Copy1
            }
            className={classNames(
              projectcss.all,
              sty.招聘矢量插画人物场景插画招聘1100924黑与白01Copy1
            )}
          />

          <PlasmicLink__
            data-plasmic-name={"frame1"}
            data-plasmic-override={overrides.frame1}
            className={classNames(projectcss.all, projectcss.a, sty.frame1)}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1OHna
              )}
            >
              {"Sign Up"}
            </div>
          </PlasmicLink__>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "registrationPage",
    "frame5",
    "fullName",
    "eMail",
    "phoneNumber",
    "createPassword",
    "confirmPassword",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "frame4",
    "checkbox",
    "frame10",
    "frame9",
    "frame8",
    "frame6",
    "frame12",
    "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1",
    "frame1"
  ],

  registrationPage: [
    "registrationPage",
    "frame5",
    "fullName",
    "eMail",
    "phoneNumber",
    "createPassword",
    "confirmPassword",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "frame4",
    "checkbox",
    "frame10",
    "frame9",
    "frame8",
    "frame6",
    "frame12",
    "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1",
    "frame1"
  ],

  frame5: [
    "frame5",
    "fullName",
    "eMail",
    "phoneNumber",
    "createPassword",
    "confirmPassword",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "frame4",
    "checkbox"
  ],

  fullName: ["fullName"],
  eMail: ["eMail"],
  phoneNumber: ["phoneNumber"],
  createPassword: ["createPassword"],
  confirmPassword: ["confirmPassword"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  textInput5: ["textInput5"],
  frame4: ["frame4"],
  checkbox: ["checkbox"],
  frame10: ["frame10", "frame9", "frame8", "frame6"],
  frame9: ["frame9", "frame8", "frame6"],
  frame8: ["frame8", "frame6"],
  frame6: ["frame6"],
  frame12: ["frame12"],
  招聘矢量插画人物场景插画招聘1100924黑与白01Copy1: [
    "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
  ],

  frame1: ["frame1"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRegistrationPage__ArgProps,
          internalVariantPropNames: PlasmicRegistrationPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegistrationPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegistrationPage";
  } else {
    func.displayName = `PlasmicRegistrationPage.${nodeName}`;
  }
  return func;
}

export const PlasmicRegistrationPage = Object.assign(
  // Top-level PlasmicRegistrationPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    registrationPage: makeNodeComponent("registrationPage"),
    frame5: makeNodeComponent("frame5"),
    fullName: makeNodeComponent("fullName"),
    eMail: makeNodeComponent("eMail"),
    phoneNumber: makeNodeComponent("phoneNumber"),
    createPassword: makeNodeComponent("createPassword"),
    confirmPassword: makeNodeComponent("confirmPassword"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    textInput5: makeNodeComponent("textInput5"),
    frame4: makeNodeComponent("frame4"),
    checkbox: makeNodeComponent("checkbox"),
    frame10: makeNodeComponent("frame10"),
    frame9: makeNodeComponent("frame9"),
    frame8: makeNodeComponent("frame8"),
    frame6: makeNodeComponent("frame6"),
    frame12: makeNodeComponent("frame12"),
    招聘矢量插画人物场景插画招聘1100924黑与白01Copy1: makeNodeComponent(
      "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
    ),
    frame1: makeNodeComponent("frame1"),
    // Metadata about props expected for PlasmicRegistrationPage
    internalVariantProps: PlasmicRegistrationPage__VariantProps,
    internalArgProps: PlasmicRegistrationPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRegistrationPage;
/* prettier-ignore-end */
