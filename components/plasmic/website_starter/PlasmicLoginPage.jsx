/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7Btu5J2C2vcmf5tsuHc6dV
// Component: 4CzVX7UGv4RN
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: 1_rwYCn2mPKT/component
import TextField from "../../TextField"; // plasmic-import: A_y8NAu0wV3a/component
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7Btu5J2C2vcmf5tsuHc6dV/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 7Btu5J2C2vcmf5tsuHc6dV/projectcss
import sty from "./PlasmicLoginPage.module.css"; // plasmic-import: 4CzVX7UGv4RN/css
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: rmimX76DFuld/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: i36rWGJNHCb1/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: bpsLJ93ouDLv/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: wXPsmpnxCKz1/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: JcKhqLwyakHg/icon
import Line1Icon from "./icons/PlasmicIcon__Line1"; // plasmic-import: HsNx3NJYwGMf/icon

createPlasmicElementProxy;

export const PlasmicLoginPage__VariantProps = new Array();

export const PlasmicLoginPage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "username.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const styleTokensClassNames = _useStyleTokens();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"loginPage"}
          data-plasmic-override={overrides.loginPage}
          className={classNames(projectcss.all, sty.loginPage)}
        >
          <div
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            className={classNames(projectcss.all, sty.login)}
          >
            <VectorIcon
              className={classNames(projectcss.all, sty.svg__pG05D)}
              role={"img"}
            />

            <Vector2Icon
              className={classNames(projectcss.all, sty.svg__yk6PG)}
              role={"img"}
            />

            <Vector3Icon
              className={classNames(projectcss.all, sty.svg__zNuIm)}
              role={"img"}
            />

            <Vector4Icon
              className={classNames(projectcss.all, sty.svg__egFoF)}
              role={"img"}
            />

            <Vector5Icon
              className={classNames(projectcss.all, sty.svg__g3Tg8)}
              role={"img"}
            />

            <Vector5Icon
              className={classNames(projectcss.all, sty.svg__nb7Kc)}
              role={"img"}
            />

            <div
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              className={classNames(projectcss.all, sty.frame5)}
            >
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rUstd
                    )}
                  >
                    {"Sign Up"}
                  </div>
                }
                linkTo={"#"}
              />

              <p
                data-plasmic-name={"p"}
                data-plasmic-override={overrides.p}
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p
                )}
              >
                {"Don\u2019t have an account?"}
              </p>
            </div>
            <div
              data-plasmic-name={"frame10"}
              data-plasmic-override={overrides.frame10}
              className={classNames(projectcss.all, sty.frame10)}
            >
              <div
                data-plasmic-name={"frame9"}
                data-plasmic-override={overrides.frame9}
                className={classNames(projectcss.all, sty.frame9)}
              >
                <div
                  data-plasmic-name={"frame8"}
                  data-plasmic-override={overrides.frame8}
                  className={classNames(projectcss.all, sty.frame8)}
                >
                  <div
                    data-plasmic-name={"frame6"}
                    data-plasmic-override={overrides.frame6}
                    className={classNames(projectcss.all, sty.frame6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kqtx7
                      )}
                    >
                      {"Login"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qQ812
                      )}
                    >
                      {"Enter your account details"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame7"}
                    data-plasmic-override={overrides.frame7}
                    className={classNames(projectcss.all, sty.frame7)}
                  >
                    <TextField
                      data-plasmic-name={"username"}
                      data-plasmic-override={overrides.username}
                      className={classNames("__wab_instance", sty.username)}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y6ALt
                          )}
                        >
                          {"Description..."}
                        </div>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hCxSk
                          )}
                        >
                          {"Username"}
                        </div>
                      }
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "username",
                          "value"
                        ]).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"Username"}
                      showLabel={false}
                      type={"text"}
                      value={generateStateValueProp($state, [
                        "username",
                        "value"
                      ])}
                    />

                    <TextField
                      data-plasmic-name={"password"}
                      data-plasmic-override={overrides.password}
                      className={classNames("__wab_instance", sty.password)}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7R62C
                          )}
                        >
                          {"Description..."}
                        </div>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__shfu9
                          )}
                        >
                          {"Username"}
                        </div>
                      }
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "password",
                          "value"
                        ]).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"Password"}
                      showLabel={false}
                      type={"password"}
                      value={generateStateValueProp($state, [
                        "password",
                        "value"
                      ])}
                    />

                    <div
                      data-plasmic-name={"frame3"}
                      data-plasmic-override={overrides.frame3}
                      className={classNames(projectcss.all, sty.frame3)}
                    >
                      <Line1Icon
                        className={classNames(projectcss.all, sty.svg__iCTjX)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                >
                  {"Forgot Password?"}
                </PlasmicLink__>
              </div>
              <PlasmicLink__
                data-plasmic-name={"frame1"}
                data-plasmic-override={overrides.frame1}
                className={classNames(projectcss.all, projectcss.a, sty.frame1)}
                component={Link}
                href={"#"}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] =
                      await $steps["updateStateVariable"];
                  }
                }}
                onMouseOver={async event => {
                  const $steps = {};
                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] =
                      await $steps["updateStateVariable"];
                  }
                }}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gJfry
                  )}
                >
                  {"Login"}
                </div>
              </PlasmicLink__>
            </div>
            <div
              data-plasmic-name={"frame12"}
              data-plasmic-override={overrides.frame12}
              className={classNames(projectcss.all, sty.frame12)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bGtJu
                )}
              >
                {"Welcome to \nIncome Tax AI"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iQm3
                )}
              >
                {"Login to access your account"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame11"}
              data-plasmic-override={overrides.frame11}
              className={classNames(projectcss.all, sty.frame11)}
            >
              <PlasmicLink__
                data-plasmic-name={"frame4"}
                data-plasmic-override={overrides.frame4}
                className={classNames(projectcss.all, projectcss.a, sty.frame4)}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zeQYy
                  )}
                >
                  {"Sign up"}
                </div>
              </PlasmicLink__>
            </div>
            <div
              data-plasmic-name={
                "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
              }
              data-plasmic-override={
                overrides.招聘矢量插画人物场景插画招聘1100924黑与白01Copy1
              }
              className={classNames(
                projectcss.all,
                sty.招聘矢量插画人物场景插画招聘1100924黑与白01Copy1
              )}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "loginPage",
    "login",
    "frame5",
    "button",
    "p",
    "frame10",
    "frame9",
    "frame8",
    "frame6",
    "frame7",
    "username",
    "password",
    "frame3",
    "link",
    "frame1",
    "frame12",
    "frame11",
    "frame4",
    "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
  ],

  loginPage: [
    "loginPage",
    "login",
    "frame5",
    "button",
    "p",
    "frame10",
    "frame9",
    "frame8",
    "frame6",
    "frame7",
    "username",
    "password",
    "frame3",
    "link",
    "frame1",
    "frame12",
    "frame11",
    "frame4",
    "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
  ],

  login: [
    "login",
    "frame5",
    "button",
    "p",
    "frame10",
    "frame9",
    "frame8",
    "frame6",
    "frame7",
    "username",
    "password",
    "frame3",
    "link",
    "frame1",
    "frame12",
    "frame11",
    "frame4",
    "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
  ],

  frame5: ["frame5", "button", "p"],
  button: ["button"],
  p: ["p"],
  frame10: [
    "frame10",
    "frame9",
    "frame8",
    "frame6",
    "frame7",
    "username",
    "password",
    "frame3",
    "link",
    "frame1"
  ],

  frame9: [
    "frame9",
    "frame8",
    "frame6",
    "frame7",
    "username",
    "password",
    "frame3",
    "link"
  ],

  frame8: ["frame8", "frame6", "frame7", "username", "password", "frame3"],
  frame6: ["frame6"],
  frame7: ["frame7", "username", "password", "frame3"],
  username: ["username"],
  password: ["password"],
  frame3: ["frame3"],
  link: ["link"],
  frame1: ["frame1"],
  frame12: ["frame12"],
  frame11: ["frame11", "frame4"],
  frame4: ["frame4"],
  招聘矢量插画人物场景插画招聘1100924黑与白01Copy1: [
    "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
  ]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginPage__ArgProps,
          internalVariantPropNames: PlasmicLoginPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginPage";
  } else {
    func.displayName = `PlasmicLoginPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginPage = Object.assign(
  // Top-level PlasmicLoginPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginPage: makeNodeComponent("loginPage"),
    login: makeNodeComponent("login"),
    frame5: makeNodeComponent("frame5"),
    button: makeNodeComponent("button"),
    p: makeNodeComponent("p"),
    frame10: makeNodeComponent("frame10"),
    frame9: makeNodeComponent("frame9"),
    frame8: makeNodeComponent("frame8"),
    frame6: makeNodeComponent("frame6"),
    frame7: makeNodeComponent("frame7"),
    username: makeNodeComponent("username"),
    password: makeNodeComponent("password"),
    frame3: makeNodeComponent("frame3"),
    link: makeNodeComponent("link"),
    frame1: makeNodeComponent("frame1"),
    frame12: makeNodeComponent("frame12"),
    frame11: makeNodeComponent("frame11"),
    frame4: makeNodeComponent("frame4"),
    招聘矢量插画人物场景插画招聘1100924黑与白01Copy1: makeNodeComponent(
      "\u62db\u8058\u77e2\u91cf\u63d2\u753b\u4eba\u7269\u573a\u666f\u63d2\u753b\u62db\u80581100924\u9ed1\u4e0e\u767d01Copy1"
    ),
    // Metadata about props expected for PlasmicLoginPage
    internalVariantProps: PlasmicLoginPage__VariantProps,
    internalArgProps: PlasmicLoginPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLoginPage;
/* prettier-ignore-end */
